module Foundation.Prop.Universe where

open import Foundation.Prelude
open import Foundation.Prop.Iff
open import Foundation.Prop.Truncation

open import Foundation.Data.Empty
open import Foundation.Data.Unit
open import Foundation.Data.Sigma

open import Cubical.Foundations.HLevels public
  using ()
  renaming (hProp to โ๐ง)

open import Cubical.Foundations.HLevels
  using (isSetHProp)

import Cubical.Foundations.Univalence as ๐ง

--------------------------------------------------------------------------------
-- hProp

โ : โ โ โ ๐ (โ โบ)
โ โ = TypeWithStr โ isProp

โโ : ๐ (โ0 โบ)
โโ = โ โ0

variable
  ๐ฃ ๐ค ๐ฅ : โ โ

_holds : โ โ โ ๐ โ
_holds = typ

isPredHolds : isPred (_holds {โ})
isPredHolds = str

--------------------------------------------------------------------------------
-- Instance

โฅโ : โโ
โฅโ = โฅ , isPropโฅ

โคโ : โโ
โคโ = โค , isPropโค

--------------------------------------------------------------------------------
-- Cubical

โโ๐ง : โ โ โ โ๐ง โ
โโ๐ง (P , pP) = P , (isPropโ๐ง pP)

โโ๐ง : โ๐ง โ โ โ โ
โโ๐ง (P , pP) = P , (isPropโ๐ง pP)

โโโ๐ง : (๐ฃ : โ๐ง โ) โ โโ๐ง (โโ๐ง ๐ฃ) โก ๐ฃ
โโโ๐ง ๐ฃ = ฮฃโกp H refl where
  H : isPred (isProp๐ง {โ})
  H = subst isPred (sym $ funExt $ ฮป x โ isPropโก๐ง) isPredIsProp

โโโ๐ง : (๐ฃ : โ โ) โ โโ๐ง (โโ๐ง ๐ฃ) โก ๐ฃ
โโโ๐ง ๐ฃ = ฮฃโกp isPredIsProp refl

โโ๐ง : โ โ โ โ๐ง โ
โโ๐ง = mkโ โโ๐ง โโ๐ง โโโ๐ง โโโ๐ง

โโก๐ง : โ โ โก โ๐ง โ
โโก๐ง = ua โโ๐ง

isSetโ : isSet (โ โ)
isSetโ = subst isSet โโก๐ง (isSetโ๐ง isSetHProp)

--------------------------------------------------------------------------------
-- Propositional extensionality

propExt : isProp A โ isProp B โ (A โ B) โ A โก B
propExt pA pB iff = Eqโ๐ง $ ๐ง.hPropExt (isPropโ๐ง pA) (isPropโ๐ง pB) (iff .โ) (iff .โ)

propExtโป : A โก B โ (A โ B)
propExtโป eq = subst (_โ _) eq โ-refl

โExt : ๐ฃ holds โ ๐ค holds โ ๐ฃ โก ๐ค
โExt {๐ฃ} {๐ค} H = ฮฃโกp isPredIsProp (propExt (isPredHolds ๐ฃ) (isPredHolds ๐ค) H)

โExtโป : ๐ฃ โก ๐ค โ ๐ฃ holds โ ๐ค holds
โExtโป H = subst (ฮป - โ - holds โ _) H โ-refl

propTruncExt : A โ B โ โฅ A โฅโ โก โฅ B โฅโ
propTruncExt iff = ua $ mkโ (map1 $ iff .โ) (map1 $ iff .โ) (ฮป _ โ is1 _ _) ฮป _ โ is1 _ _

--------------------------------------------------------------------------------
-- hProp truncation

โฅ_โฅ : ๐ โ โ โ โ
โฅ A โฅ = โฅ A โฅโ , is1

โTruncExt : A โ B โ โฅ A โฅ โก โฅ B โฅ
โTruncExt iff = ฮฃโกp isPredIsProp (propTruncExt iff)
